name: Migrate DB (ECS task)

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: migration
          GIT_SHA: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -f docker/DockerfileAws -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:snapshot-$GIT_SHA .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:snapshot-$GIT_SHA

      - name: Get latest revision of task definition
        id: latest-task-def
        run: |
          LATEST_TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition ${{ vars.ECS_MIGRATION_TASK_DEFINITION }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "LATEST_TASK_DEF=$LATEST_TASK_DEF" >> $GITHUB_ENV

      - name: Run ECS migration task
        run: |
          aws ecs run-task \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --capacity-provider-strategy '[{"capacityProvider" : "capacity-provider"}]' \
            --task-definition $LATEST_TASK_DEF \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.PRIVATE_SUBNET_ID }}],securityGroups=[${{ secrets.DB_SECURITY_GROUP_ID }}]}" \
            --overrides '{ 
              "containerOverrides": [ 
                { 
                  "name": "migration-container", 
                  "environment": [ 
                    { 
                      "name": "MYSQL_USER", 
                      "value": "${{ secrets.MYSQL_USERNAME_MIGRATION }}" 
                    }, 
                    { 
                      "name": "MYSQL_PASSWORD", 
                      "value": "${{ secrets.MYSQL_PASSWORD_MIGRATION }}" 
                    }, 
                    { 
                      "name": "MYSQL_HOST", 
                      "value": "${{ secrets.MYSQL_HOST }}" 
                    }, 
                    { 
                      "name": "MYSQL_PORT", 
                      "value": "${{ secrets.MYSQL_PORT }}" 
                    }, 
                    { 
                      "name": "MYSQL_DATABASE", 
                      "value": "${{ secrets.MYSQL_DATABASE }}" 
                    } 
                  ] 
                } 
              ], 
              "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecs-role" 
            }'
